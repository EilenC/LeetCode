package part1

/**
在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。

每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。

注意，一开始你手头没有任何零钱。

给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。



示例 1：

输入：bills = [5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。
示例 2：

输入：bills = [5,5,10,10,20]
输出：false
解释：
前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
由于不是每位顾客都得到了正确的找零，所以答案是 false。

*/

/*
*
1. 依次遍历,并且将自己的收入（零钱）存储起来,当收到超过5元时候,针对类型进行返回
2. 5元直接加入钱包收入,10元则只能用5元找零,20元可以由10+5跟5+5+5找零
*/
func lemonadeChange(bills []int) bool {
	if bills[0] != 5 {
		return false
	}
	wallet5, wallet10 := uint32(1), uint32(0)
	for i := 1; i < len(bills); i++ { //从第二位开始计算
		if bills[i] == 5 {
			wallet5 += 1
		} else if bills[i] == 10 {
			// 10块钱 只有一种找零的办法
			if wallet5 <= 0 {
				return false
			}
			wallet5 -= 1
			wallet10 += 1
		} else {
			// 20块钱 有两种找零办法
			// 先判断1张5元,1张10元
			if wallet10 > 0 && wallet5 > 0 {
				wallet10 -= 1
				wallet5 -= 1
				continue
			}
			// 判断是否有3张5元
			if wallet5 >= 3 {
				wallet5 -= 3
				continue
			}
			return false
		}
	}
	return true
}
